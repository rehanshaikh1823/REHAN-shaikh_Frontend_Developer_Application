{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/arehan/Desktop/job-portal/client/src/components/GetAllJobs.js\",\n    _s = $RefreshSig$();\n\n// import React from \"react\";\n// import { useState, useEffect } from \"react\";\n// import { useQuery, gql } from \"@apollo/client\";\n// import { LOAD_JOBS } from \"../GraphQL/Queries\";\n// import data from \"../MOCK_DATA.json\";\n// import JobBoardComponent from \"./JobBoardComponent\";\n// const GetAllJobs = () => {\n//   const { error, loading, gdata } = useQuery(LOAD_JOBS);\n//   const [gjobs, setgJobs] = useState([]);\n//   const [jobs, setJobs] = useState(data.slice(0, 30));\n//   const [filters, setFilters] = useState([]);\n//   const filterFunc = ({ role, level, tools, languages }) => {\n//     if (filters.length === 0) {\n//       return true;\n//     }\n//     const tags = [role, level];\n//     if (tools) {\n//       tags.push(...tools);\n//     }\n//     if (languages) {\n//       tags.push(...languages);\n//     }\n//     return tags.some((tag) => filters.includes(tag));\n//   };\n//   const filteredJobs = jobs?.filter(filterFunc);\n//   const handleTagClick = (tag) => {\n//     if (filters.includes(tag)) return;\n//     setFilters([...filters, tag]);\n//   };\n//   const handleFilterClick = (passedFilter) => {\n//     setFilters(filters.filter((f) => f !== passedFilter));\n//   };\n//   useEffect(() => {\n//     if (data) {\n//       setJobs(data);\n//     }\n//   }, [data]);\n//   useEffect(() => {\n//     if (gdata) {\n//       setgJobs(gdata.getAllJob);\n//     }\n//   }, [gdata]);\n//   return (\n//     <>\n//       {/* graphql data */}\n//       <div>x{console.log(gjobs)}</div>\n//       {/* <div className=\"flex bg-white shadow-md my-16 mx-10 p-6 rounded\">\n//         {filters?.length > 0 &&\n//           filters.map((filter) => (\n//             <span\n//               onClick={() => handleFilterClick(filter)}\n//               className=\"text-blue-500 bg-blue-100 font-bold m-2 p-2 rounded\"\n//             >\n//               {filter}\n//             </span>\n//           ))}\n//       </div>\n//       {jobs.length === 0 ? (\n//         <p>jobs are fetching</p>\n//       ) : (\n//         filteredJobs.map((job) => (\n//           <JobBoardComponent\n//             job={job}\n//             key={job.id}\n//             handleTagClick={handleTagClick}\n//           />\n//         ))\n//       )} */}\n//     </>\n//   );\n// };\n// export default GetAllJobs;\n// // {typeof jobs != \"undefined\" ? (\n// //     <>\n// //       <h1>{typeof jobs}</h1>\n// //       {console.log(jobs.getAllJob[2].id)}\n// //       {/* <h1>{jobs}</h1> */}\n// //     </>\n// //   ) : (\n// //     // jobs.map((job) => console.log(jobs))\n// //     console.log(\"data is fetching\")\n// //   )}\nimport React, { useEffect, useState } from \"react\";\nimport { useQuery, gql } from \"@apollo/client\";\nimport { LOAD_JOBS } from \"../GraphQL/Queries\";\n\nfunction GetUsers() {\n  _s();\n\n  const {\n    error,\n    loading,\n    data\n  } = useQuery(LOAD_USERS);\n  const [users, setUsers] = useState([]);\n  useEffect(() => {\n    if (data) {\n      setUsers(data.getAllUser);\n    }\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: users.map(val => {\n      return /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\" \", val.firstName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 16\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n}\n\n_s(GetUsers, \"INVcvgjol47Nx01vrgAq9x9IhFs=\", false, function () {\n  return [useQuery];\n});\n\n_c = GetUsers;\nexport default GetUsers;\n\nvar _c;\n\n$RefreshReg$(_c, \"GetUsers\");","map":{"version":3,"sources":["/home/arehan/Desktop/job-portal/client/src/components/GetAllJobs.js"],"names":["React","useEffect","useState","useQuery","gql","LOAD_JOBS","GetUsers","error","loading","data","LOAD_USERS","users","setUsers","getAllUser","map","val","firstName"],"mappings":";;;;;AAAA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,QAAT,EAAmBC,GAAnB,QAA8B,gBAA9B;AACA,SAASC,SAAT,QAA0B,oBAA1B;;AAEA,SAASC,QAAT,GAAoB;AAAA;;AAClB,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA,OAAT;AAAkBC,IAAAA;AAAlB,MAA2BN,QAAQ,CAACO,UAAD,CAAzC;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,EAAD,CAAlC;AACAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIQ,IAAJ,EAAU;AACRG,MAAAA,QAAQ,CAACH,IAAI,CAACI,UAAN,CAAR;AACD;AACF,GAJQ,EAIN,CAACJ,IAAD,CAJM,CAAT;AAMA,sBACE;AAAA,cACGE,KAAK,CAACG,GAAN,CAAWC,GAAD,IAAS;AAClB,0BAAO;AAAA,wBAAMA,GAAG,CAACC,SAAV;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AACD,KAFA;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;;GAhBQV,Q;UAC0BH,Q;;;KAD1BG,Q;AAkBT,eAAeA,QAAf","sourcesContent":["// import React from \"react\";\n// import { useState, useEffect } from \"react\";\n// import { useQuery, gql } from \"@apollo/client\";\n// import { LOAD_JOBS } from \"../GraphQL/Queries\";\n\n// import data from \"../MOCK_DATA.json\";\n\n// import JobBoardComponent from \"./JobBoardComponent\";\n\n// const GetAllJobs = () => {\n//   const { error, loading, gdata } = useQuery(LOAD_JOBS);\n//   const [gjobs, setgJobs] = useState([]);\n//   const [jobs, setJobs] = useState(data.slice(0, 30));\n//   const [filters, setFilters] = useState([]);\n\n//   const filterFunc = ({ role, level, tools, languages }) => {\n//     if (filters.length === 0) {\n//       return true;\n//     }\n//     const tags = [role, level];\n//     if (tools) {\n//       tags.push(...tools);\n//     }\n//     if (languages) {\n//       tags.push(...languages);\n//     }\n//     return tags.some((tag) => filters.includes(tag));\n//   };\n//   const filteredJobs = jobs?.filter(filterFunc);\n//   const handleTagClick = (tag) => {\n//     if (filters.includes(tag)) return;\n//     setFilters([...filters, tag]);\n//   };\n//   const handleFilterClick = (passedFilter) => {\n//     setFilters(filters.filter((f) => f !== passedFilter));\n//   };\n\n//   useEffect(() => {\n//     if (data) {\n//       setJobs(data);\n//     }\n//   }, [data]);\n\n//   useEffect(() => {\n//     if (gdata) {\n//       setgJobs(gdata.getAllJob);\n//     }\n//   }, [gdata]);\n\n//   return (\n//     <>\n//       {/* graphql data */}\n//       <div>x{console.log(gjobs)}</div>\n//       {/* <div className=\"flex bg-white shadow-md my-16 mx-10 p-6 rounded\">\n//         {filters?.length > 0 &&\n//           filters.map((filter) => (\n//             <span\n//               onClick={() => handleFilterClick(filter)}\n//               className=\"text-blue-500 bg-blue-100 font-bold m-2 p-2 rounded\"\n//             >\n//               {filter}\n//             </span>\n//           ))}\n//       </div>\n//       {jobs.length === 0 ? (\n//         <p>jobs are fetching</p>\n//       ) : (\n//         filteredJobs.map((job) => (\n//           <JobBoardComponent\n//             job={job}\n//             key={job.id}\n//             handleTagClick={handleTagClick}\n//           />\n//         ))\n//       )} */}\n//     </>\n//   );\n// };\n\n// export default GetAllJobs;\n\n// // {typeof jobs != \"undefined\" ? (\n// //     <>\n// //       <h1>{typeof jobs}</h1>\n// //       {console.log(jobs.getAllJob[2].id)}\n// //       {/* <h1>{jobs}</h1> */}\n// //     </>\n// //   ) : (\n// //     // jobs.map((job) => console.log(jobs))\n// //     console.log(\"data is fetching\")\n// //   )}\n\nimport React, { useEffect, useState } from \"react\";\nimport { useQuery, gql } from \"@apollo/client\";\nimport { LOAD_JOBS } from \"../GraphQL/Queries\";\n\nfunction GetUsers() {\n  const { error, loading, data } = useQuery(LOAD_USERS);\n  const [users, setUsers] = useState([]);\n  useEffect(() => {\n    if (data) {\n      setUsers(data.getAllUser);\n    }\n  }, [data]);\n\n  return (\n    <div>\n      {users.map((val) => {\n        return <h1> {val.firstName}</h1>;\n      })}\n    </div>\n  );\n}\n\nexport default GetUsers;\n"]},"metadata":{},"sourceType":"module"}