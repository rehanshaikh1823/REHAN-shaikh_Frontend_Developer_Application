{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/arehan/Desktop/job-portal/client/src/components/GetAllJobs.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport { useQuery, gql } from \"@apollo/client\";\nimport { LOAD_JOBS } from \"../GraphQL/Queries\";\nimport JobBoardComponent from \"./JobBoardComponent\";\n\nconst GetAllJobs = () => {\n  _s();\n\n  const {\n    error,\n    loading,\n    data\n  } = useQuery(LOAD_JOBS);\n  const [jobs, setJobs] = useState([]); // const [users, setUsers] = useState([]);\n  // const [jobs, setJobs] = useState(data.slice(0, 30));\n  // const [filters, setFilters] = useState([]);\n  // const filterFunc = ({ role, level, tools, languages }) => {\n  //   if (filters.length === 0) {\n  //     return true;\n  //   }\n  //   const tags = [role, level];\n  //   if (tools) {\n  //     tags.push(...tools);\n  //   }\n  //   if (languages) {\n  //     tags.push(...languages);\n  //   }\n  //   return tags.some((tag) => filters.includes(tag));\n  // };\n  // const filteredJobs = jobs?.filter(filterFunc);\n  // const handleTagClick = (tag) => {\n  //   if (filters.includes(tag)) return;\n  //   setFilters([...filters, tag]);\n  // };\n  // const handleFilterClick = (passedFilter) => {\n  //   setFilters(filters.filter((f) => f !== passedFilter));\n  // };\n\n  useEffect(() => {\n    if (data) {\n      setJobs(data);\n    }\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: users.map(val => {\n        return /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\" \", val.firstName]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 18\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(GetAllJobs, \"eKaJZ4Yb+6kR/6F3zqf47r0YJzE=\", false, function () {\n  return [useQuery];\n});\n\n_c = GetAllJobs;\nexport default GetAllJobs; // {typeof jobs != \"undefined\" ? (\n//     <>\n//       <h1>{typeof jobs}</h1>\n//       {console.log(jobs.getAllJob[2].id)}\n//       {/* <h1>{jobs}</h1> */}\n//     </>\n//   ) : (\n//     // jobs.map((job) => console.log(jobs))\n//     console.log(\"data is fetching\")\n//   )}\n\nvar _c;\n\n$RefreshReg$(_c, \"GetAllJobs\");","map":{"version":3,"sources":["/home/arehan/Desktop/job-portal/client/src/components/GetAllJobs.js"],"names":["React","useState","useEffect","useQuery","gql","LOAD_JOBS","JobBoardComponent","GetAllJobs","error","loading","data","jobs","setJobs","users","map","val","firstName"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,QAAT,EAAmBC,GAAnB,QAA8B,gBAA9B;AACA,SAASC,SAAT,QAA0B,oBAA1B;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;;AAEA,MAAMC,UAAU,GAAG,MAAM;AAAA;;AACvB,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA,OAAT;AAAkBC,IAAAA;AAAlB,MAA2BP,QAAQ,CAACE,SAAD,CAAzC;AACA,QAAM,CAACM,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,CAAC,EAAD,CAAhC,CAFuB,CAGvB;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIQ,IAAJ,EAAU;AACRE,MAAAA,OAAO,CAACF,IAAD,CAAP;AACD;AACF,GAJQ,EAIN,CAACA,IAAD,CAJM,CAAT;AAMA,sBACE;AAAA,2BAEE;AAAA,gBACGG,KAAK,CAACC,GAAN,CAAWC,GAAD,IAAS;AAClB,4BAAO;AAAA,0BAAMA,GAAG,CAACC,SAAV;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAP;AACD,OAFA;AADH;AAAA;AAAA;AAAA;AAAA;AAFF,mBADF;AAgCD,CApED;;GAAMT,U;UAC6BJ,Q;;;KAD7BI,U;AAsEN,eAAeA,UAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport { useQuery, gql } from \"@apollo/client\";\nimport { LOAD_JOBS } from \"../GraphQL/Queries\";\nimport JobBoardComponent from \"./JobBoardComponent\";\n\nconst GetAllJobs = () => {\n  const { error, loading, data } = useQuery(LOAD_JOBS);\n  const [jobs, setJobs] = useState([]);\n  // const [users, setUsers] = useState([]);\n\n  // const [jobs, setJobs] = useState(data.slice(0, 30));\n  // const [filters, setFilters] = useState([]);\n\n  // const filterFunc = ({ role, level, tools, languages }) => {\n  //   if (filters.length === 0) {\n  //     return true;\n  //   }\n  //   const tags = [role, level];\n  //   if (tools) {\n  //     tags.push(...tools);\n  //   }\n  //   if (languages) {\n  //     tags.push(...languages);\n  //   }\n  //   return tags.some((tag) => filters.includes(tag));\n  // };\n  // const filteredJobs = jobs?.filter(filterFunc);\n  // const handleTagClick = (tag) => {\n  //   if (filters.includes(tag)) return;\n  //   setFilters([...filters, tag]);\n  // };\n  // const handleFilterClick = (passedFilter) => {\n  //   setFilters(filters.filter((f) => f !== passedFilter));\n  // };\n\n  useEffect(() => {\n    if (data) {\n      setJobs(data);\n    }\n  }, [data]);\n\n  return (\n    <>\n      {/* graphql data */}\n      <div>\n        {users.map((val) => {\n          return <h1> {val.firstName}</h1>;\n        })}\n      </div>\n      {/* <div className=\"flex bg-white shadow-md my-16 mx-10 p-6 rounded\">\n        {filters?.length > 0 &&\n          filters.map((filter) => (\n            <span\n              onClick={() => handleFilterClick(filter)}\n              className=\"text-blue-500 bg-blue-100 font-bold m-2 p-2 rounded\"\n            >\n              {filter}\n            </span>\n          ))}\n      </div>\n      {jobs.length === 0 ? (\n        <p>jobs are fetching</p>\n      ) : (\n        filteredJobs.map((job) => (\n          <JobBoardComponent\n            job={job}\n            key={job.id}\n            handleTagClick={handleTagClick}\n          />\n        ))\n      )} */}\n    </>\n  );\n};\n\nexport default GetAllJobs;\n\n// {typeof jobs != \"undefined\" ? (\n//     <>\n//       <h1>{typeof jobs}</h1>\n//       {console.log(jobs.getAllJob[2].id)}\n//       {/* <h1>{jobs}</h1> */}\n//     </>\n//   ) : (\n//     // jobs.map((job) => console.log(jobs))\n//     console.log(\"data is fetching\")\n//   )}\n"]},"metadata":{},"sourceType":"module"}