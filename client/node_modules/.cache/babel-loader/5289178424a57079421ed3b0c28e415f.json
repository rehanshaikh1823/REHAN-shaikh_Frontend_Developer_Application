{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/arehan/Desktop/job-portal/client/src/components/GetAllJobs.js\",\n    _jobs,\n    _s = $RefreshSig$();\n\n// const [jobs, setJobs] = useState(data.slice(0, 30));\n// const [filters, setFilters] = useState([]);\n// const filterFunc = ({ role, level, tools, languages }) => {\n//   if (filters.length === 0) {\n//     return true;\n//   }\n//   const tags = [role, level];\n//   if (tools) {\n//     tags.push(...tools);\n//   }\n//   if (languages) {\n//     tags.push(...languages);\n//   }\n//   return tags.some((tag) => filters.includes(tag));\n// };\n// const filteredJobs = jobs?.filter(filterFunc);\n// const handleTagClick = (tag) => {\n//   if (filters.includes(tag)) return;\n//   setFilters([...filters, tag]);\n// };\n// const handleFilterClick = (passedFilter) => {\n//   setFilters(filters.filter((f) => f !== passedFilter));\n// };\n//   return (\n//     <>\n//\n//       {/* <div className=\"flex bg-white shadow-md my-16 mx-10 p-6 rounded\">\n//         {filters?.length > 0 &&\n//           filters.map((filter) => (\n//             <span\n//               onClick={() => handleFilterClick(filter)}\n//               className=\"text-blue-500 bg-blue-100 font-bold m-2 p-2 rounded\"\n//             >\n//               {filter}\n//             </span>\n//           ))}\n//       </div>\n//       {jobs.length === 0 ? (\n//         <p>jobs are fetching</p>\n//       ) : (\n//         filteredJobs.map((job) => (\n//           <JobBoardComponent\n//             job={job}\n//             key={job.id}\n//             handleTagClick={handleTagClick}\n//           />\n//         ))\n//       )} */}\n//     </>\n//   );\n// };\nimport React, { useEffect, useState } from \"react\";\nimport { useQuery, gql } from \"@apollo/client\";\nimport { LOAD_JOBS } from \"../GraphQL/Queries\";\nimport JobBoardComponent from \"./JobBoardComponent\";\n\nconst filterFunc = ({\n  role,\n  level,\n  tools,\n  languages\n}) => {\n  if (filters.length === 0) {\n    return true;\n  }\n\n  const tags = [role, level];\n\n  if (tools) {\n    tags.push(...tools);\n  }\n\n  if (languages) {\n    tags.push(...languages);\n  }\n\n  return tags.some(tag => filters.includes(tag));\n};\n\nconst filteredJobs = (_jobs = jobs) === null || _jobs === void 0 ? void 0 : _jobs.filter(filterFunc);\n\nconst handleTagClick = tag => {\n  if (filters.includes(tag)) return;\n  setFilters([...filters, tag]);\n};\n\nconst handleFilterClick = passedFilter => {\n  setFilters(filters.filter(f => f !== passedFilter));\n};\n\nfunction GetAllJobs() {\n  _s();\n\n  const {\n    error,\n    loading,\n    data\n  } = useQuery(LOAD_JOBS);\n  const [jobs, setJobs] = useState([]);\n  useEffect(() => {\n    if (data) {\n      setJobs(data.getAllJob);\n    }\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: jobs.map(val => {\n        return /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\" \", val.role]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 18\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(GetAllJobs, \"eKaJZ4Yb+6kR/6F3zqf47r0YJzE=\", false, function () {\n  return [useQuery];\n});\n\n_c = GetAllJobs;\nexport default GetAllJobs;\n\nvar _c;\n\n$RefreshReg$(_c, \"GetAllJobs\");","map":{"version":3,"sources":["/home/arehan/Desktop/job-portal/client/src/components/GetAllJobs.js"],"names":["React","useEffect","useState","useQuery","gql","LOAD_JOBS","JobBoardComponent","filterFunc","role","level","tools","languages","filters","length","tags","push","some","tag","includes","filteredJobs","jobs","filter","handleTagClick","setFilters","handleFilterClick","passedFilter","f","GetAllJobs","error","loading","data","setJobs","getAllJob","map","val"],"mappings":";;;;;;;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,QAAT,EAAmBC,GAAnB,QAA8B,gBAA9B;AACA,SAASC,SAAT,QAA0B,oBAA1B;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;;AACA,MAAMC,UAAU,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,KAAR;AAAeC,EAAAA,KAAf;AAAsBC,EAAAA;AAAtB,CAAD,KAAuC;AACxD,MAAIC,OAAO,CAACC,MAAR,KAAmB,CAAvB,EAA0B;AACxB,WAAO,IAAP;AACD;;AACD,QAAMC,IAAI,GAAG,CAACN,IAAD,EAAOC,KAAP,CAAb;;AACA,MAAIC,KAAJ,EAAW;AACTI,IAAAA,IAAI,CAACC,IAAL,CAAU,GAAGL,KAAb;AACD;;AACD,MAAIC,SAAJ,EAAe;AACbG,IAAAA,IAAI,CAACC,IAAL,CAAU,GAAGJ,SAAb;AACD;;AACD,SAAOG,IAAI,CAACE,IAAL,CAAWC,GAAD,IAASL,OAAO,CAACM,QAAR,CAAiBD,GAAjB,CAAnB,CAAP;AACD,CAZD;;AAaA,MAAME,YAAY,YAAGC,IAAH,0CAAG,MAAMC,MAAN,CAAad,UAAb,CAArB;;AACA,MAAMe,cAAc,GAAIL,GAAD,IAAS;AAC9B,MAAIL,OAAO,CAACM,QAAR,CAAiBD,GAAjB,CAAJ,EAA2B;AAC3BM,EAAAA,UAAU,CAAC,CAAC,GAAGX,OAAJ,EAAaK,GAAb,CAAD,CAAV;AACD,CAHD;;AAIA,MAAMO,iBAAiB,GAAIC,YAAD,IAAkB;AAC1CF,EAAAA,UAAU,CAACX,OAAO,CAACS,MAAR,CAAgBK,CAAD,IAAOA,CAAC,KAAKD,YAA5B,CAAD,CAAV;AACD,CAFD;;AAIA,SAASE,UAAT,GAAsB;AAAA;;AACpB,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA,OAAT;AAAkBC,IAAAA;AAAlB,MAA2B3B,QAAQ,CAACE,SAAD,CAAzC;AACA,QAAM,CAACe,IAAD,EAAOW,OAAP,IAAkB7B,QAAQ,CAAC,EAAD,CAAhC;AACAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI6B,IAAJ,EAAU;AACRC,MAAAA,OAAO,CAACD,IAAI,CAACE,SAAN,CAAP;AACD;AACF,GAJQ,EAIN,CAACF,IAAD,CAJM,CAAT;AAMA,sBACE;AAAA,2BACE;AAAA,gBACGV,IAAI,CAACa,GAAL,CAAUC,GAAD,IAAS;AACjB,4BAAO;AAAA,0BAAMA,GAAG,CAAC1B,IAAV;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAP;AACD,OAFA;AADH;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AA+BD;;GAxCQmB,U;UAC0BxB,Q;;;KAD1BwB,U;AA0CT,eAAeA,UAAf","sourcesContent":["// const [jobs, setJobs] = useState(data.slice(0, 30));\n// const [filters, setFilters] = useState([]);\n\n// const filterFunc = ({ role, level, tools, languages }) => {\n//   if (filters.length === 0) {\n//     return true;\n//   }\n//   const tags = [role, level];\n//   if (tools) {\n//     tags.push(...tools);\n//   }\n//   if (languages) {\n//     tags.push(...languages);\n//   }\n//   return tags.some((tag) => filters.includes(tag));\n// };\n// const filteredJobs = jobs?.filter(filterFunc);\n// const handleTagClick = (tag) => {\n//   if (filters.includes(tag)) return;\n//   setFilters([...filters, tag]);\n// };\n// const handleFilterClick = (passedFilter) => {\n//   setFilters(filters.filter((f) => f !== passedFilter));\n// };\n\n//   return (\n//     <>\n//\n//       {/* <div className=\"flex bg-white shadow-md my-16 mx-10 p-6 rounded\">\n//         {filters?.length > 0 &&\n//           filters.map((filter) => (\n//             <span\n//               onClick={() => handleFilterClick(filter)}\n//               className=\"text-blue-500 bg-blue-100 font-bold m-2 p-2 rounded\"\n//             >\n//               {filter}\n//             </span>\n//           ))}\n//       </div>\n//       {jobs.length === 0 ? (\n//         <p>jobs are fetching</p>\n//       ) : (\n//         filteredJobs.map((job) => (\n//           <JobBoardComponent\n//             job={job}\n//             key={job.id}\n//             handleTagClick={handleTagClick}\n//           />\n//         ))\n//       )} */}\n//     </>\n//   );\n// };\n\nimport React, { useEffect, useState } from \"react\";\nimport { useQuery, gql } from \"@apollo/client\";\nimport { LOAD_JOBS } from \"../GraphQL/Queries\";\nimport JobBoardComponent from \"./JobBoardComponent\";\nconst filterFunc = ({ role, level, tools, languages }) => {\n  if (filters.length === 0) {\n    return true;\n  }\n  const tags = [role, level];\n  if (tools) {\n    tags.push(...tools);\n  }\n  if (languages) {\n    tags.push(...languages);\n  }\n  return tags.some((tag) => filters.includes(tag));\n};\nconst filteredJobs = jobs?.filter(filterFunc);\nconst handleTagClick = (tag) => {\n  if (filters.includes(tag)) return;\n  setFilters([...filters, tag]);\n};\nconst handleFilterClick = (passedFilter) => {\n  setFilters(filters.filter((f) => f !== passedFilter));\n};\n\nfunction GetAllJobs() {\n  const { error, loading, data } = useQuery(LOAD_JOBS);\n  const [jobs, setJobs] = useState([]);\n  useEffect(() => {\n    if (data) {\n      setJobs(data.getAllJob);\n    }\n  }, [data]);\n\n  return (\n    <>\n      <div>\n        {jobs.map((val) => {\n          return <h1> {val.role}</h1>;\n        })}\n      </div>\n      {/* <div className=\"flex bg-white shadow-md my-16 mx-10 p-6 rounded\">\n        {filters?.length > 0 &&\n          filters.map((filter) => (\n            <span\n              onClick={() => handleFilterClick(filter)}\n              className=\"text-blue-500 bg-blue-100 font-bold m-2 p-2 rounded\"\n            >\n              {filter}\n            </span>\n          ))}\n      </div>\n      {jobs.length === 0 ? (\n        <p>jobs are fetching</p>\n      ) : (\n        filteredJobs.map((job) => (\n          <JobBoardComponent\n            job={job}\n            key={job.id}\n            handleTagClick={handleTagClick}\n          />\n        ))\n      )} */}\n    </>\n  );\n}\n\nexport default GetAllJobs;\n"]},"metadata":{},"sourceType":"module"}